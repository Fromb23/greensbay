generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id         Int         @id @default(autoincrement())
  username   String      @db.VarChar(100)
  email      String      @unique(map: "email") @db.VarChar(100)
  password   String      @db.VarChar(255)
  role       admins_role @default(ADMIN)
  created_at DateTime    @default(now()) @db.Timestamp(0)
}

model CustomerAddress {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique(map: "CustomerAddress_userId_key")
  address String @db.VarChar(255)
  city    String @db.VarChar(100)
  country String @db.VarChar(100)
  users   users  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "CustomerAddress_userId_fkey")
}

model deliveryaddress {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  address   String   @db.VarChar(255)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(100)
  zipCode   String?  @db.VarChar(20)
  phone     String   @db.VarChar(15)
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "DeliveryAddress_userId_fkey")

  @@index([userId], map: "DeliveryAddress_userId_fkey")
}

model order {
  id              Int               @id @default(autoincrement())
  userId          Int
  totalAmount     Int
  createdAt       DateTime          @default(now())
  status          order_status      @default(PENDING)
  users           users             @relation(fields: [userId], references: [id], map: "Order_userId_fkey")
  orderitem       orderitem[]

  @@index([userId], map: "Order_userId_fkey")
}

model orderitem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  price       Int
  totalAmount Int
  createdAt   DateTime @default(now())
  order       order    @relation(fields: [orderId], references: [id], map: "OrderItem_orderId_fkey")
  products    products @relation(fields: [productId], references: [id], map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model products {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  image          String?     @db.VarChar(500)
  units_left     Int         @default(0)
  stock          Int         @default(0)
  discount_price Decimal?    @db.Decimal(10, 2)
  actual_price   Decimal     @db.Decimal(10, 2)
  created_at     DateTime    @default(now()) @db.Timestamp(0)
  categoryId     Int?
  orderitem      orderitem[]
  category       categories? @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_category")
  Wishlist       Wishlist[]

  @@index([categoryId], map: "fk_category")
}

model categories {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  img       String?    @db.VarChar(255)
  products  products[]
}

model users {
  id              Int               @id @default(autoincrement())
  firstname       String            @db.VarChar(100)
  lastname        String            @db.VarChar(100)
  email           String            @unique(map: "email") @db.VarChar(100)
  password        String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  role            users_role        @default(CUSTOMER)
  phone           String?           @db.Char(15)
  customeraddress CustomerAddress?
  deliveryaddress deliveryaddress[]
  order           order[]
  Wishlist        Wishlist[]
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
}

enum admins_role {
  ADMIN
  CUSTOMER
}

enum order_status {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum users_role {
  ADMIN
  CUSTOMER
}
